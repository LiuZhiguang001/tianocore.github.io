<!-- [[Category:EDKII]] -->
<!-- [[Category:EDKIIBuild]] -->
This page provides [[step-by-step instructions]] for setting up a [http://www.tianocore.org/edk2/ EDK II] build environment on Linux using a native GCC 4.4 (and newer) installation.  This EDK II setup does not require the Mingw version of GCC to be built, and therefore can be much faster to setup.

==Limitations of GCC 4.4==

The GCC 4.4 toolchain only supports building images for the IA32 and X64 architectures.

Also, in some cases if GCC 4.4 is installed under Linux x86 (32-bit mode), then it may only support building UEFI images for the IA32 architecture.

==Getting Started==

These instructions will be written as a series of commands executed from a command terminal.

Often these instructions will contain a command which needs to be executed in the terminal window.  For example:

<pre>
bash$ echo this text is a sample command
</pre>

To execute this command, highlight the text of the command in your web browser.  (Note that the 'bash$' text is not part of the command!)  Most web browsers should be able to copy the text by selecting Copy under the Edit menu.  Now, change back to the terminal application, and there should be a Paste operation under the Edit menu.  After pasting the command into the shell, you may need to press the enter or return key to execute the command. 

Of course, there may be other ways to copy and paste the command into the terminal which are specific to the windowing environment and applications that you are using.  If all else fails, however, you can type the command by hand.

Some commands are very long, and we use the backslash character (\) to tell the shell program that the command is not finished.  For example:

<pre>
bash$ echo this bold text is a sample command \
        which is broken into two lines
</pre>

When you copy and paste, make sure you include all lines of the command (including the backslash (\) characters).  If you are typing the command, you can remove the backslash character (\) and combine the lines into a single line if you prefer.

If a command starts with the sudo command, then you may be prompted for your user password.  This will be the same password as you used to login to the system.

For the purposes of this set of instructions, we will be using the following paths.
{|
|Edk2 source tree: || $HOME/src/edk2
|-
|Native GCC 4.4 compiler installation: || /usr/bin/gcc
|-
|Intel ASL Compiler installation: || /usr/bin/iasl
|}

You will need to change the commands if you want to use different locations, but this is not recommended unless you are sure that you know what you are doing.

===Internet proxies===

If your network utilizes a firewall with a web proxy, then you may need to configure your proxy information for various command line applications to work.  You may need to consult with your network administrator to find out the computer name and port to use for proxy setup.  The following commands are common examples of how you would configure your proxy by setting an environment variable:

<pre>
bash$ export http_proxy=http://proxy.domain.com:proxy_port
bash$ export ftp_proxy=$http_proxy
</pre>

To utilize the subversion source control command behind an internet firewall with a web proxy, you should configure the ~/.subversion/servers file.

==Arch Linux 2010.05==
Note: Arch Linux is not officially supported or tested by the edk2 project at this time.

===Open the GNOME Terminal program===

These instructions will utilize Arch Linux's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, locate it under the Applications menu and the System Tools sub-menu.

===Install required software with pacman===

To install the required packages, you must be root.  Therefore we use 'su' to become the root user.

<pre>
bash$ su -
bash$ pacman -S base-devel glibc iasl python2 subversion
bash$ exit
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions|remaining instructions]] are common for most UNIX-like systems.

==Fedora 13==
Note: Fedora is not officially supported or tested by the edk2 project at this time.

Note: x86 (32-bit) Fedora will install GCC 4.4 which is only capable of building UEFI for the IA32 architecture.

===Open the GNOME Terminal program===

These instructions will utilize Fedora's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, locate it under the Applications menu and the System Tools sub-menu.

===Install required software with yum===

To install the required packages, you must be root.  Therefore we use 'su' to become the root user.

<pre>
bash$ su -
bash$ yum groupinstall development-tools
bash$ yum install iasl libuuid-devel
bash$ exit
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions|remaining instructions]] are common for most UNIX-like systems.

==Mandriva 2010==
Note: Mandriva is not officially supported or tested by the edk2 project at this time.

Note: x86 (32-bit) Mandriva will install GCC 4.4 which is only capable of building UEFI for the IA32 architecture.

===Open the Terminal program===

These instructions will utilize Mandriva's built in command shell (bash) via the Terminal application.  To open the Terminal application, locate it under the Applications menu and the Tools sub-menu.

===Install required software with urpmi===

To install the required packages, you must be root.  Therefore we use 'su' to become the root user.

<pre>
bash$ su -
bash$ urpmi task-c++-devel iasl libuuid-devel subversion
bash$ exit
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions|remaining instructions]] are common for most UNIX-like systems.

==openSUSE 12.1==

Note: openSUSE is not officially supported or tested by the edk2 project at this time.

===Open the GNOME Terminal program===

These instructions will utilize openSUSE's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, click the 'Computer' menu, click the 'More Applications' button, and then enter 'terminal' into the filter text box.

===Install required software with zypper===

Several openSUSE packages will be needed to fully set up an edk2 build environment.  In order to easily install all the requirements, you need to run this command.

<pre>
bash> sudo zypper in -t pattern devel_basis
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions|remaining instructions]] are common for most UNIX-like systems.

==Ubuntu 10.10==
Notes:
* The Ubuntu platform is not officially supported or tested by the edk2 project at this time.
* Both the x86 (32-bit) and x86-64 (64-bit) Ubuntu versions will install GCC 4.4 which is capable of building UEFI for both the IA32 and X64 architectures.
* These instructions should work for Ubuntu 10.04 as well

===Open the GNOME Terminal program===

These instructions will utilize Ubuntu's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, locate it under the Applications menu and the Accessories sub-menu.

===Install required software from apt===

Several ubuntu packages will be needed to fully set up an edk2 build environment.  In order to easily install all the requirements, you need to run this command.

<pre>
bash$ sudo apt-get install build-essential subversion uuid-dev iasl
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions|remaining instructions]] are common for most UNIX-like systems.

==Common instructions==

A significant portion of the steps are common on the various UNIX-like platforms.  You should start with the instructions for the operating system that most closely matches your platform, and it will direct you here at the appropriate time.

===Get the edk2 source tree===

<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ git clone https://github.com/tianocore/edk2
</pre>
{| class="mw-collapsible mw-collapsed"
! style="text-align:left; font-weight: normal;" | Or, download source using subversion: 
|-
| If you are behind a web proxy, then you may need to configure your proxy in the ~/.subversion/servers file.
<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ svn co https://svn.code.sf.net/p/edk2/code/trunk/edk2
</pre>
|}

===Build the EDK II BaseTools===

<pre>
bash$ make -C edk2/BaseTools
</pre>

===Setup build shell environment===

<pre>
bash$ cd ~/src/edk2
bash$ export EDK_TOOLS_PATH=$HOME/src/edk2/BaseTools
bash$ . edksetup.sh BaseTools
</pre>

===Modify Conf Files===

You will need to edit the Conf/tools_def.txt and Conf/target.txt files.  These changes will enable the MdeModulePkg to be built using the GCC 4.4 compiler.

====Set Build Target Information====

For the Conf/target.txt file, find the following lines:

<pre>
ACTIVE_PLATFORM       = Nt32Pkg/Nt32Pkg.dsc
TOOL_CHAIN_TAG        = MYTOOLS
</pre>

And change the corresponding lines to match these:

<pre>
ACTIVE_PLATFORM       = MdeModulePkg/MdeModulePkg.dsc
TOOL_CHAIN_TAG        = GCC44
</pre>

Note: The 'gcc --version' command can be used to find out your GCC version.  Use the '''GCC45''' toolchain for gcc 4.5.* and the '''GCC46''' toolchain for gcc 4.6.*.

Optionally, you may consider finding:

<pre>
TARGET_ARCH           = IA32
</pre>

...and changing it if your GCC 4.4 installation supports 64-bit builds.  You can change it to either 'X64', or even 'IA32 X64' which will build both architectures.

===Build Hello World!  (and the rest of MdeModulePkg)===

Now you should be able to simply run the build command to compile the MdeModulePkg.

<pre>
bash$ build
</pre>

One result of the build is that you should have the HelloWorld UEFI application:
<pre>
bash$ ls Build/MdeModule/DEBUG_*/*/HelloWorld.efi
</pre>

===Build [http://www.tianocore.org/ovmf/ OVMF]===

Once your build environment is set up you might be interested in [[How to build OVMF|building the OVMF platform]] which is included in the main edk2 source tree.  Since [http://www.tianocore.org/ovmf/ OVMF] builds a full system firmware image this may be of interest to UEFI system firmware developers.

=See Also=
* [[Step-by-step instructions]]
* [[Unix-like systems]] - Instructions which walk through building the Mingw GCC cross-compiler