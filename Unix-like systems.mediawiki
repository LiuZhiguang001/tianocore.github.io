'''Note''': These instructions are not recommended for most EDK II developers. If you are working with a supported system, then the [[Using EDK II with Native GCC]] page is faster/easier, and produces smaller UEFI image builds.

This page provides [[step-by-step instructions]] for setting up a [[EDK II]] build environment on various Unix-like systems.

==Getting started for UNIX-like operating systems==

These instructions will be written as a series of commands executed from a command terminal.

Often these instructions will contain a command which needs to be executed in the terminal window.  For example:

<pre>
bash$ echo this bold text is a sample command
</pre>

To execute this command, highlight the bold text of the command in your web browser.  Most web browsers should be able to copy the text by selecting Copy under the Edit menu.  Now, change back to the terminal application, and there should be a Paste operation under the Edit menu.  After pasting the command into the shell, you may need to press the enter or return key to execute the command. 

Of course, there may be other ways to copy and paste the command into the terminal which are specific to the windowing environment and applications that you are using.  If all else fails, however, you can type the command by hand.

Some commands are very long, and we use the backslash character (\) to tell the shell program that the command is not finished.  For example:

<pre>
bash$ echo this bold text is a sample command \
        which is broken into two lines
</pre>

When you copy and paste, make sure you include all lines of the command (including the backslash (\) characters).  If you are typing the command, you can remove the backslash character (\) and combine the lines into a single line if you prefer.

If a command starts with the sudo command, then you may be prompted for your user password.  This will be the same password as you used to login to the system.

For the purposes of this set of instructions, we will be using the following paths.
{|
|Edk2 source tree: || ~/src/edk2
|-
|GCC X64 cross-compiler installation: || ~/programs/gcc/x64
|-
|GCC IA32 cross-compiler installation: || ~/programs/gcc/ia32
|-
|Intel ASL Compiler installation: || ~/src/acpica-unix-20090521/compiler/iasl (symlink to compiler at ~/programs/iasl)
|}

You will need to change the commands if you want to use different locations, but this is not recommended unless you are sure that you know what you are doing.

===Internet proxies===

If your network utilizes a firewall with a web proxy, then you may need to configure your proxy information for various command line applications to work.  You may need to consult with your network administrator to find out the computer name and port to use for proxy setup.  The following commands are common examples of how you would configure your proxy by setting an environment variable:

<pre>
bash$ export http_proxy=http://proxy.domain.com:proxy_port
bash$ export ftp_proxy=$http_proxy
</pre>

To utilize the subversion source control command behind an internet firewall with a web proxy, you should configure the ~/.subversion/servers file.

== Cygwin 1.7.1 ==
Notes:
* Cygwin is not officially supported or tested by the edk2 project at this time.
* Building of [[EDK II]] components will be done using bash.
Prerequisites:
* Cygwin 1.7.1 is currently installed on the system.
* Cygwin 1.7.1 setup.exe is available on the system to install additional packages as needed.

Run Cygwin setup.exe and install the following additional packages.
* bison
* flex
* libgmp-devel
* libiconv
* libmpfr-devel
* gcc (use the compiler upgrade helper option under Devel)
* make
* python
* subversion
* wget
* libuuid-devel
* util-linux (for uuidgen)

When pulling source files using subversion you may choose to get them to a more Windows friendly location.  All system drives are mapped under /cygdrive when using CYGWIN and bash (ie. C:\ maps to /cygdrive/c).  This allows you to substitute ~/src/edk2 for an alternate path such as /cygdrive/c/src/edk2 so files can be access at C:\src\edk2 as well.

<big>
Continue with common instructions
</big>

The [[#Common instructions for UNIX-like systems|remaining instructions]] are common for most UNIX-like systems.

==Fedora 11==
Please note:
* Fedora 11 is not officially supported or tested by the edk2 project at this time.
* These instructions assume that the Software Development option was enabled during the Fedora installation.

===Open the GNOME Terminal program===

These instructions will utilize Fedora's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, locate it under the Applications menu and the System Tools sub-menu.

===Install MPFR library===

The MPFR library must be installed to allow the gcc cross compiler to be built.

<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ wget http://www.mpfr.org/mpfr-current/mpfr-2.4.1.tar.bz2
bash$ tar -jxf mpfr-2.4.1.tar.bz2
bash$ cd mpfr-2.4.1
bash$ ./configure --prefix=/usr
bash$ make
</pre>

To install the library, you must be root.  Therefore we use 'su' to become the root user, for the 'make install' command.

<pre>
bash$ su
bash$ make install
bash$ exit
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions for UNIX-like systems|remaining instructions]] are common for most UNIX-like systems.

==Mac OS X 10.5==
===Xcode Tools===

The first step is to install the Apple Xcode development environment:
  http://developer.apple.com/tools/xcode

To install Xcode, you must register as an Apple developer, and download the Xcode installation disk image (which is fairly large).  These instructions were verified with Xcode 3.0.  Within the Xcode Tools disk image, only the Xcode Tools.mpkg package needs to be installed.

===Open OS X Terminal program===

Past this point, the remaining instructions will utilize OS X's built in command shell (bash) via the Terminal application.  To open the command terminal application, open Finder, then press the Cmd-Shift-U key combination.  (This opens the Applications => Utilities folder.)  In the Utilities folder, you should see the Terminal application.

===GMP & MPFR (if behind a web proxy)===

The gmp and mpfr libraries are needed to build the gcc cross compiler at a later point in these instructions.  Building these libraries on OS X can present some difficulties, so if you are not behind a network firewall, then consider using the macports project to install these libraries. (see below)  Be sure to set the http_proxy and ftp_proxy environment variables before using the 'curl' commands below.

<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ curl --remote-name \
  ftp://ftp.gnu.org/gnu/gmp/gmp-4.2.2.tar.bz2
bash$ tar jxvf gmp-4.2.2.tar.bz2
bash$ cd gmp-4.2.2
bash$ ./configure --prefix=/usr
bash$ make
bash$ make check
bash$ sudo make install
</pre>

Note: This might be needed for 64-bit machines if the MPFR configure fails below.
<pre>
bash$ export CFLAGS="-m64"
</pre>

<pre>
bash$ cd ~/src
bash$ curl --remote-name \
  http://www.mpfr.org/mpfr-current/mpfr-2.4.1.tar.bz2
bash$ tar -jxf mpfr-2.4.1.tar.bz2
bash$ cd mpfr-2.4.1
bash$ ./configure --prefix=/usr
bash$ make
bash$ sudo make install
</pre>

===GMP & MPFR via Macports (if not behind web proxy)===

If you are not behind a network firewall, then the http://www.macports.org project can greatly simlify the installation of gmp & mpfr.  (Macports does not work easily with web proxies at this time.) After installing macports you should be able to simply run this command at the shell prompt.

<pre>
bash$ sudo port install gmp mpfr
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions for UNIX-like systems|remaining instructions]] are common for most UNIX-like systems.

<!--
==Red Hat Enterprise Linux 4 Desktop==
Coming soon...
-->
<!--
==SuSE Linux Enterprise 10 Desktop==
Coming soon...
-->

==Ubuntu 9.10==
Note: The Ubuntu platform is not officially supported or tested by the edk2 project at this time.

===Open the GNOME Terminal program===

These instructions will utilize Ubuntu's built in command shell (bash) via the GNOME Terminal application.  To open the Terminal application, locate it under the Applications menu and the Accessories sub-menu.

===Install required software from apt===

Several ubuntu packages will be needed to fully set up an edk2 build environment.  In order to easily install all the requirements, you need to run this command.

<pre>
bash$ sudo apt-get install build-essential uuid-dev texinfo \
        bison flex libgmp3-dev libmpfr-dev subversion
</pre>

<big>
Continue with common instructions
</big>

The [[#Common instructions for UNIX-like systems|remaining instructions]] are common for most UNIX-like systems.

==Common instructions for UNIX-like systems==

A significant portion of the steps are common on the various UNIX-like platforms.  You should start with the instructions for the operating system that most closely matches your platform, and it will direct you here at the appropriate time.

===Get the edk2 source tree===

<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ git clone https://github.com/tianocore/edk2
</pre>
{| class="mw-collapsible mw-collapsed"
! style="text-align:left; font-weight: normal;" | Or, download source using subversion: 
|-
| If you are behind a web proxy, then you may need to configure your proxy in the ~/.subversion/servers file.
<pre>
bash$ mkdir ~/src
bash$ cd ~/src
bash$ svn co https://svn.code.sf.net/p/edk2/code/trunk/edk2
</pre>
|}

===Build the EDK II BaseTools===

<pre>
bash$ make -C edk2/BaseTools
</pre>

===Build gcc x64 UEFI cross compiler===

In order to build UEFI images for x64, you will need to build a cross-compiler build of gcc.  This can take quite a while to complete, possibly several hours on older systems.  But, a Python script has been provided to automate this build process.

Note: This is only needed if behind a internet firewall!
<pre>
bash$ export http_proxy=http://proxy.domain.com:proxy_port
</pre>

To build gcc for x64, use these commands (this will take quite a while to complete):

<pre>
bash$ cd ~/src/edk2/BaseTools/gcc
bash$ ./mingw-gcc-build.py --arch=x64 \
  --prefix=~/programs/gcc/x64
</pre>

===Setup build shell environment===

<pre>
bash$ cd ~/src/edk2
bash$ export EDK_TOOLS_PATH=~/src/edk2/BaseTools
bash$ . edksetup.sh BaseTools
</pre>

===Modify Conf Files===

You will need to edit the Conf/tools_def.txt and Conf/target.txt files.  These changes will enable the MdeModulePkg to be built using the gcc x64 compiler.

====Enable GCC X64 Cross-Compiler====

For the Conf/tools_def.txt file, find the following entry and comment the line out:

<pre>
DEFINE UNIXGCC_X64_PETOOLS_PREFIX  = /opt/tiano/x86_64-pc-mingw64/x86_64-pc-mingw64/bin/
</pre>

Next, find the following entry and uncomment the line:

<pre>
DEFINE UNIXGCC_X64_PETOOLS_PREFIX  = ENV(HOME)/programs/gcc/x64/bin/x86_64-pc-mingw32-
</pre>

====Set Build Target Information====

For the Conf/target.txt file, find the following lines:

<pre>
ACTIVE_PLATFORM       = Nt32Pkg/Nt32Pkg.dsc
TARGET_ARCH           = IA32
TOOL_CHAIN_TAG        = MYTOOLS
</pre>

And change the cooresponding lines to match these:

<pre>
ACTIVE_PLATFORM       = MdeModulePkg/MdeModulePkg.dsc
TARGET_ARCH           = X64
TOOL_CHAIN_TAG        = UNIXGCC
</pre>

===Build Hello World!  (and the rest of MdeModulePkg)===

Now you should be able to simply run the build command to compile the MdeModulePkg.

<pre>
bash$ build
</pre>

As a tangible result of the build, you should have the HelloWorld UEFI X64 application.  If you have a X64 UEFI system available to you, then this application should be able to run successfully under the shell.

<pre>
bash$ ls Build/MdeModule/DEBUG_UNIXGCC/X64/HelloWorld.efi
</pre>

==Enabling Other Tools==

The above showed how to setup an X64 build environment for building the core MdeModulePkg.  However, other packages may require additional tools such as an IA32 cross-compiler and an ASL compiler.  The steps to build these tools are described in this section.

===Build gcc IA32 UEFI cross compiler===

In order to build UEFI images for IA32, you will need to build a cross-compiler build of gcc.  This can take quite a while to complete, possibly several hours on older systems.  But, a Python script has been provided to automate this build process.

Note: This is only needed if behind a internet firewall!
<pre>
bash$ export http_proxy=http://proxy.domain.com:proxy_port
</pre>

To build gcc for IA32, use these commands (this will take quite a while to complete):

<pre>
bash$ cd ~/src/edk2/BaseTools/gcc
bash$ ./mingw-gcc-build.py --arch=ia32 \
  --prefix=~/programs/gcc/ia32
</pre>

====Modify Conf Files====

Once the cross-compiler has been successfully built the Conf/tools_def.txt will need to be updated so the cross-compiler can be used.

Find the following statement in Conf/tools_def.txt and comment the line out:

<pre>
DEFINE UNIXGCC_IA32_PETOOLS_PREFIX = /opt/tiano/i386-tiano-pe/i386-tiano-pe/bin/
</pre>

Next, find the following statement and uncomment the line: 

<pre>
DEFINE UNIXGCC_IA32_PETOOLS_PREFIX = ENV(HOME)/programs/gcc/ia32/bin/i686-pc-mingw32-
</pre>

To enable building your target image with IA32 support the Conf/target.txt will also need to be modified.

Find the TARGET_ARCH definition in Conf/target.txt and change the corresponding line to match this

<pre>
TARGET_ARCH           = IA32
</pre>

===Build the Intel ASL (iasl) compiler===

The Intel ASL compiler is not required for all edk2 developers.  It is unlikely that UEFI Application or UEFI Driver builds will need an ASL compiler.  But, if you are building an entire system firmware image, then you may need an ASL compiler.  For example, the edk2 OVMF sample platform does require an ASL compiler in order to be built.

First, download the latest ACPI-CA release from http://www.acpica.org.

'''OS X users''': At this time, the latest versions of ACPI-CA are not building on Mac OS X, so please use the release from 20081031 instead.

<pre>
bash$ cd ~/src
bash$ wget http://www.acpica.org/download/acpica-unix-20090521.tar.gz
bash$ tar -zxf acpica-unix-20090521.tar.gz
bash$ make -C acpica-unix-20090521/compiler
bash$ ln -s ~/src/acpica-unix-20090521/compiler/iasl ~/programs/iasl
</pre>

====Modify Conf Files====

Once the Intel ASL compiler has been successfully built the Conf/tools_def.txt will need to be updated so the ASL compiler can be used.

Find the following statement in Conf/tools_def.txt and comment the line out:

<pre>
DEFINE UNIX_IASL_BIN           = /usr/bin/iasl
</pre>

Next, find the following statement and uncomment the line:

<pre>
DEFINE UNIX_IASL_BIN           = $(HOME)/programs/iasl
</pre>

===Build [http://tianocore.github.io/ovmf/ OVMF]===

Once your build environment is set up you might be interested in building the [http://tianocore.github.io/ovmf/ OVMF] platform which is included in the main edk2 source tree.  Since [http://tianocore.github.io/ovmf/ OVMF] builds a full system firmware image this may be of interest to UEFI system firmware developers.

=See Also=
* [[Step-by-step instructions]]

<!-- [[Category:EDKII]] -->