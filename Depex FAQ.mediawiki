[[Category:FAQ]]
[[Category:EDKII]]
[[Category:EDK]]
[[Category:DEPEX]]
[[Category:Dependency]]


Frequently asked questions about Depex

===How is the Dependency expression generated and what is is the relationship with the dependency on libraries?===
A) The way the dependency expression is generated is the build will take the [DEPEX] section from a modules .inf file.

B) The module .inf lists the library classes it depends on as well. Then those library classes are cross referenced through the platform .dsc file to figure out which library instances are needed to complete the link of the module. If the libraries also have [DEPEX] sections then those are “Anded” with the modules.

C) EDK 1 did not have the concept of a Library Class – there were just libraries that were just linked against. EDK1 used the depx source file method with libraries. The developer’s job is easier in EDK II since they don’t have to think about the inner dependencies on the libraries.

D) To see the list of dependencies use the build option “-Y DEPEX”

===Are dependencies static or execution time?===
Execution time via DEPEX
It is also possible to use events to create a runtime dependency behavior, but it would be a matter of individual implementation. 

===What are a priori files?===
The  a priori file is a special file that may optionally be present in a firmware volume, and its main purpose is to provide a greater degree of flexibility in the firmware design of a platform. Specifically, the a priori file complements the dependency expression mechanism of PEI or DXE by stipulating a series of modules which need be dispatched in a prescribed order